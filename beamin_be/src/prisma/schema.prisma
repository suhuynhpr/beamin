// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Cách sử dụng:
// Khởi tạo cơ sở dữ liệu: npx prisma db push
// Tạo client Prisma: npx prisma generate
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  body        String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    Int?
}

enum Gender {
  Male
  Female
}

model User {
  id              Int       @id @default(autoincrement())
  name            String?
  email           String    @unique
  password        String
  phoneNumber     String?
  dateOfBirth     DateTime?
  gender          Gender?   @default(Male)
  profileImage    String?
  address         String?
  bio             String?
  permision       String?   @default("user")
  isEmailVerified Boolean   @default(false)
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  articles        Article[]
  Order           Order[]
}

model Food {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Int
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  Order       Order[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  foods       Food[]
}

enum statusOrder {
  Pending
  Confirmed
  InProgress
  Completed
  Canceled
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  foodId     Int
  quantity   Int
  totalPrice Int
  status     statusOrder @default(Pending)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  food       Food        @relation(fields: [foodId], references: [id])
}
